/*
Copyright 2019 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/toversus/sample-bindings/pkg/apis/bindings/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseBindingLister helps list DatabaseBindings.
type DatabaseBindingLister interface {
	// List lists all DatabaseBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseBinding, err error)
	// DatabaseBindings returns an object that can list and get DatabaseBindings.
	DatabaseBindings(namespace string) DatabaseBindingNamespaceLister
	DatabaseBindingListerExpansion
}

// databaseBindingLister implements the DatabaseBindingLister interface.
type databaseBindingLister struct {
	indexer cache.Indexer
}

// NewDatabaseBindingLister returns a new DatabaseBindingLister.
func NewDatabaseBindingLister(indexer cache.Indexer) DatabaseBindingLister {
	return &databaseBindingLister{indexer: indexer}
}

// List lists all DatabaseBindings in the indexer.
func (s *databaseBindingLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseBinding))
	})
	return ret, err
}

// DatabaseBindings returns an object that can list and get DatabaseBindings.
func (s *databaseBindingLister) DatabaseBindings(namespace string) DatabaseBindingNamespaceLister {
	return databaseBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseBindingNamespaceLister helps list and get DatabaseBindings.
type DatabaseBindingNamespaceLister interface {
	// List lists all DatabaseBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseBinding, err error)
	// Get retrieves the DatabaseBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DatabaseBinding, error)
	DatabaseBindingNamespaceListerExpansion
}

// databaseBindingNamespaceLister implements the DatabaseBindingNamespaceLister
// interface.
type databaseBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseBindings in the indexer for a given namespace.
func (s databaseBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseBinding))
	})
	return ret, err
}

// Get retrieves the DatabaseBinding from the indexer for a given namespace and name.
func (s databaseBindingNamespaceLister) Get(name string) (*v1alpha1.DatabaseBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databasebinding"), name)
	}
	return obj.(*v1alpha1.DatabaseBinding), nil
}
